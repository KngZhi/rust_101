[
  "\n// 修复错误\nenum Number {\n    Zero,\n    One,\n    Two,\n}\n\nenum Number1 {\n    Zero = 0,\n    One,\n    Two,\n}\n\n// C语言风格的枚举定义\nenum Number2 {\n    Zero = 0.0,\n    One = 1.0,\n    Two = 2.0,\n}\n\n\nfn main() {\n    // 通过 `as` 可以将枚举值强转为整数类型\n    assert_eq!(Number::One, Number1::One);\n    assert_eq!(Number1::One, Number2::One);\n} \n",
  "\n// 填空\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {\n    let msg1 = Message::Move{__}; // 使用x = 1, y = 2 来初始化\n    let msg2 = Message::Write(__); // 使用 \"hello, world!\" 来初始化\n} \n",
  "\n// 仅填空并修复错误\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {\n    let msg = Message::Move{x: 1, y: 2};\n\n    if let Message::Move{__} = msg {\n        assert_eq!(a, b);\n    } else {\n        panic!(\"不要让这行代码运行！\");\n    }\n} \n",
  "\n// 填空，并修复错误\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {\n    let msgs: __ = [\n        Message::Quit,\n        Message::Move{x:1, y:3},\n        Message::ChangeColor(255,255,0)\n    ];\n\n    for msg in msgs {\n        show_message(msg)\n    }\n} \n\nfn show_message(msg: Message) {\n    println!(\"{}\", msg);\n}\n",
  "\n// 填空让 `println` 输出，同时添加一些代码不要让最后一行的 `panic` 执行到\nfn main() {\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n\n    if let __ = six {\n        println!(\"{}\", n)\n    } \n        \n    panic!(\"不要让这行代码运行！\");\n} \n\nfn plus_one(x: Option<i32>) -> Option<i32> {\n    match x {\n        __ => None,\n        __ => Some(i + 1),\n    }\n}\n",
  "\n// 填空，让代码运行\nuse crate::List::*;\n\nenum List {\n    // Cons: 链表中包含有值的节点，节点是元组类型，第一个元素是节点的值，第二个元素是指向下一个节点的指针\n    Cons(u32, Box<List>),\n    // Nil: 链表中的最后一个节点，用于说明链表的结束\n    Nil,\n}\n\n// 为枚举实现一些方法\nimpl List {\n    // 创建空的链表\n    fn new() -> List {\n        // 因为没有节点，所以直接返回 Nil 节点\n        // 枚举成员 Nil 的类型是 List\n        Nil\n    }\n\n    // 在老的链表前面新增一个节点，并返回新的链表\n    fn prepend(self, elem: u32) -> __ {\n        Cons(elem, Box::new(self))\n    }\n\n    // 返回链表的长度\n    fn len(&self) -> u32 {\n        match *self {\n            // 这里我们不能拿走 tail 的所有权，因此需要获取它的引用\n            Cons(_, __ tail) => 1 + tail.len(),\n            // 空链表的长度为 0\n            Nil => 0\n        }\n    }\n\n    // 返回链表的字符串表现形式，用于打印输出\n    fn stringify(&self) -> String {\n        match *self {\n            Cons(head, ref tail) => {\n                // 递归生成字符串\n                format!(\"{}, {}\", head, tail.__())\n            },\n            Nil => {\n                format!(\"Nil\")\n            },\n        }\n    }\n}\n\nfn main() {\n    // 创建一个新的链表(也是空的)\n    let mut list = List::new();\n\n    // 添加一些元素\n    list = list.prepend(1);\n    list = list.prepend(2);\n    list = list.prepend(3);\n\n    // 打印列表的当前状态\n    println!(\"链表的长度是: {}\", list.len());\n    println!(\"{}\", list.stringify());\n}\n"
]